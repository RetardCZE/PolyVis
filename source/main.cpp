
// === TRIVIS INCLUDES ===

#include "trivis/core/tri_vis.h"
#include "trivis/core/geom/robust_geometry.h"
#include "trivis/core/geom/generic_geom_types.h"
#include "trivis/core/utils/simple_clock.h"
#include "trivis/core/utils/clipper_utils.h"
#include "trivis/core/geom/generic_geom_utils.h"

#include "trivis/map_coverage/map_coverage.h"
#include "trivis/map_coverage/random_points.h"
#include "trivis/map_coverage/macs.h"

// === THIS PROJECT INCLUDES ===

#include "data_loading/load_map.h"
#include "drawing/drawing.h"
#include "drawing/random_colors.h"
#include "logging/logging.h"
#include "visualization.h"
#include "polyviz.h"
#include "edgevis/structs/mesh.h"
#include "edgevis//structs/edge.h"

#include "polyanya/parsers/map_parser.h"


#include <boost/program_options.hpp>
#include <boost/filesystem.hpp>
#ifndef INPUT_MAPS_DIR
#define INPUT_MAPS_DIR "."
#endif

namespace po = boost::program_options;
namespace fs = boost::filesystem;

namespace tv = trivis;
namespace tvc = tv::core;
namespace tvg = tvc::geom;
namespace tve = trivis_examples;
namespace dr = tve::drawing;

/*
 * Argument parsing taken from trivis_examples.cc
*/

struct ProgramOptionVariables {
    std::string input_map_name = "undefined";
    std::string input_map_extension = ".txt";
    std::string input_map_dir = INPUT_MAPS_DIR;
    std::string input_map_full_path;
    double map_scale = -1.0;
    double vis_radius = -1.0;
    int n_random_samples = 1;
    unsigned random_seed = std::random_device{}();
};

void AddProgramOptions(
        po::options_description &options_description,
        ProgramOptionVariables &pov
) {
    options_description.add_options()
            ("help,h", "Produce this help message. \n (*) Overwrites options: all.")
            ("map-name,m",
             po::value(&pov.input_map_name)->default_value(pov.input_map_name),
             "Map name.")
            ("map-ext",
             po::value(&pov.input_map_extension)->default_value(pov.input_map_extension),
             "Map file extension.")
            ("map-dir",
             po::value(&pov.input_map_dir)->default_value(pov.input_map_dir),
             "Map file directory.")
            ("map",
             po::value(&pov.input_map_full_path)->default_value(pov.input_map_full_path),
             "Full path to the map file. \n (*) Overwrites options: map_name, map_ext, map_dir.")
            ("map-scale,s",
             po::value(&pov.map_scale),
             "Map scale (optional).")
            ("vis-radius,r",
             po::value(&pov.vis_radius)->default_value(pov.vis_radius),
             "Visibility radius (-1 ~ infinite).")
            ("n-random-samples,n",
             po::value(&pov.n_random_samples)->default_value(pov.n_random_samples),
             "How many random samples should be generated.")
            ("random-seed",
             po::value(&pov.random_seed)->default_value(pov.random_seed),
             "Seed for the random generator (generated by std::random_device{}() by default).");
}

char ParseProgramOptions(
        int argc,
        const char *const *argv,
        ProgramOptionVariables &pov
) {
    po::variables_map vm;
    po::options_description command_line_options;
    po::options_description options_description("General options");
    AddProgramOptions(options_description, pov);
    try {
        // Parse the command line arguments.
        command_line_options.add(options_description);
        po::store(po::parse_command_line(argc, argv, command_line_options), vm);
        po::notify(vm);
    } catch (const std::exception &e) {
        return 'e';
    }
    if (vm.count("help")) {
        // If '-h' or '--help' option, print the options and return 'h'.
        command_line_options.print(std::cout, 80);
        return 'h';
    }
    // Make input_file_name, input_file_extension, input_file_dir, and input_file_full_path consistent.
    if (pov.input_map_full_path.empty()) {
        pov.input_map_full_path = pov.input_map_dir + "/" + pov.input_map_name + (pov.input_map_extension.empty() ? "" : pov.input_map_extension);
    } else {
        auto aux = fs::path(pov.input_map_full_path);
        pov.input_map_name = fs::change_extension(aux, "").filename().string();
        pov.input_map_extension = aux.extension().string();
        pov.input_map_dir = aux.parent_path().string();
    }
    return '0';
}

tvg::RadialVisibilityRegion ComputeVisibilityRegion(
        const tvg::FPoint &p,
        const tvc::TriVis &vis,
        std::optional<double> vis_radius,
        double eps_min_edge_len
) {
    int num_expansions;
    tvg::AbstractVisibilityRegion abs_vis_reg;
    if (!vis.ComputeVisibilityRegion(p, vis_radius, abs_vis_reg, num_expansions)) {
        LOGF_WRN("Visibility region from seed " << p << " could not be found!");
        return {};
    }
    tvg::RadialVisibilityRegion vis_reg = vis.ConvertToVisibilityRegion(abs_vis_reg);
    RemoveAntennas(vis_reg);
    if (vis_radius) {
        vis_reg = trivis::core::TriVis::ConvertToRadialVisibilityRegion(*vis_radius, vis_reg);
    }
    RemoveShortEdges(eps_min_edge_len, vis_reg);
    return vis_reg;
}

int body(ProgramOptionVariables pov)
{
    std::cout << "Preparing meshes, initializing TriVis and PolyVis solvers.\n";
    parsers::MapParser mapParser;
    parsers::Fade2DMesh fade2DMesh;
    parsers::MergedMesh mergedMesh;
    parsers::GeomMesh geomMeshTri;
    parsers::GeomMesh geomMeshPoly;

    std::string mapName = pov.input_map_full_path;

    mapParser.convertMapToFade2DMesh(mapName, fade2DMesh);
    mapParser.convertMapToMergedMesh(mapName, mergedMesh);
    mapParser.convertMergedMeshToGeomMesh(mergedMesh, geomMeshPoly);
    mapParser.convertFade2DMeshToGeomMesh(fade2DMesh, geomMeshTri);

    // Create and initialize TriVis object.
    tvc::TriVis vis;
    {   // Load map from file and move it to TriVis (without copying).
        tvg::PolyMap map;
        std::string load_msg = tve::data_loading::LoadPolyMapSafely(pov.input_map_full_path, map, pov.map_scale);
        if (load_msg != "ok") {
            LOGF_FTL("Error while loading map. " << load_msg);
            return EXIT_FAILURE;
        }
        map.RemoveDuplicatePoints();
        map.RemoveCollinearPoints();
        vis.SetMap(std::move(map));
        // cannot use map anymore
    }
    vis.TriangulateMapConstrainedDelaunay();
    vis.FillBucketing();
    vis.OptimizeBuckets();

    // Generate n random points in the map.
    std::vector<double> triangle_accum_areas; // auxiliary structure to improve speed
    std::mt19937 rng(pov.random_seed); // random generator
    tvg::FPoints random_points(pov.n_random_samples);

    std::vector<polyanya::Point> verticesTri;
    std::vector<polyanya::Point> verticesPoly;
    std::vector<polyanya::Point> r_points;
    polyanya::Point p;
    PolyVis solverTri(geomMeshTri);
    PolyVis solverPoly(geomMeshPoly);

    std::optional<double> vis_radius = pov.vis_radius > 0.0 ? std::make_optional(pov.vis_radius) : std::nullopt;
    std::cout << "Generating points. (TriVis feature, points are converted for polyanya)\n";
    for (auto &rp: random_points) {
        rp = tv::map_coverage::UniformRandomPointInRandomTriangle(vis.triangles(), triangle_accum_areas, rng);
        p.x = rp.x;
        p.y = rp.y;
        r_points.push_back(p);
    }

    MapVisualizer drawerTri(geomMeshTri);
    MapVisualizer drawerPoly(geomMeshPoly);
    tvc::utils::SimpleClock clock;
    double time;
    std::cout << "\nComputing polygon of visibility on map "<< pov.input_map_name <<".\n";

    std::cout << "\nRunning TriVis.\n";
    clock.Restart();
    for (auto pos : random_points){
        ComputeVisibilityRegion(pos, vis, vis_radius, 1e-6);

    }
    time = clock.TimeInSeconds();
    std::cout << "Total computation time of "<< pov.n_random_samples << " random points was " <<
                                                                    time << " seconds.\n";
    std::cout << "Mean computation time of "<< pov.n_random_samples << " random points was " <<
              time/pov.n_random_samples << " seconds/point.\n";

    std::cout << "\nRunning PolyVis on triangular mesh.\n";
    clock.Restart();
    for (auto pos : r_points){
        verticesTri = solverTri.get_visibility_polygon(pos);
    }
    time = clock.TimeInSeconds();
    std::cout << "Total computation time of "<< pov.n_random_samples << " random points was " <<
              time << " seconds.\n";
    std::cout << "Mean computation time of "<< pov.n_random_samples << " random points was " <<
              time/pov.n_random_samples << " seconds/point.\n";

    std::cout << "\nRunning PolyVis on polygonal mesh.\n";
    clock.Restart();
    for (auto pos : r_points){
        verticesPoly = solverPoly.get_visibility_polygon(pos);
    }
    time = clock.TimeInSeconds();
    std::cout << "Total computation time of "<< pov.n_random_samples << " random points was " <<
              time << " seconds.\n";
    std::cout << "Mean computation time of "<< pov.n_random_samples << " random points was " <<
              time/pov.n_random_samples << " seconds/point.\n";


    drawerTri.set_visible_polygon(p, verticesTri);
    drawerTri.redraw("triangles.pdf");
    drawerPoly.set_visible_polygon(p, verticesPoly);
    drawerPoly.redraw("polygons.pdf");
    return 0;
}

int main(
        int argc,
        const char *const *argv
) {
    ProgramOptionVariables pov;
    char c = ParseProgramOptions(argc, argv, pov);
    if (c == 'h') {
        return EXIT_SUCCESS;
    } else if (c == 'e') {
        return EXIT_FAILURE;
    } else {
        return body(pov);
    }
}




