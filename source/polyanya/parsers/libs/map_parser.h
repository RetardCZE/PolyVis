/**
 * File:    map_parser.h
 *
 * Date:   24.03.2021
 * Author:  Lukas Fanta
 * E-mail:  fantalukas2108@gmail.com
 *
 */

#ifndef POLYGONS_AND_MAPS_MAPPARSER_H
#define POLYGONS_AND_MAPS_MAPPARSER_H

/*
 * Local includes
 */
#include "utils.h"
// #include "mesh_plotter/plotter.h"

namespace parsers {

    class MapParser {
    public:
        MapParser() = default;

        ~MapParser() { deleteNodes(); };

        /**
         * Convert map (e.g. potholes.txt) to mesh generated by FADE2D library
         * @param filename - name of the file with path to file
         * @param fade2DMesh - structure to save mesh generated by FADE2D
         */
        void convertMapToFade2DMesh(const std::string &filename, Fade2DMesh &fade2DMesh);

        /**
         * Convert istream (e.g. std::cin) to mesh generated by FADE2D library
         * @param infile - istream file
         * @param fade2DMesh - structure to save mesh generated by FADE2D
         */
        void convertIstreamToFade2DMesh(std::istream &infile, Fade2DMesh &fade2DMesh);

        /**
         * Read merged mesh structure from fade2d mesh structure
         * @param fade2DMesh struct
         * @param mergedMesh struct
         */
        void readMergedMeshFromFade2DMesh(const Fade2DMesh &fade2DMesh, MergedMesh &mergedMesh);

        /**
         * Convert  map (e.g. potholes.txt) to merged mesh
         * @param filename name of the file
         * @param mergedMesh output merged mesh structure
         */
        void convertMapToMergedMesh(const std::string &filename, MergedMesh &mergedMesh);

        /**
         * Convert  map (e.g. potholes.txt) to geom mesh
         * @param filename name of the file
         * @param geomMesh output geom mesh structure
         */
        void convertMapToGeomMesh(const std::string &filename, GeomMesh &geomMesh);

        /**
         * Generate/compute merged mesh from already read mereged mesh structure
         * @param mergedMesh
         */
        void generateMergedMesh(MergedMesh &mergedMesh);

        /**
         * Convert fade 2d mesh to geom mesh
         * @param fade2DMesh struct
         * @param geomMesh struct
         */
        void convertFade2DMeshToGeomMesh(const Fade2DMesh &fade2DMesh, GeomMesh &geomMesh);

        /**
         * Convert merged mesh to geom mesh
         * @param mergedMesh struct
         * @param geomMesh struct
         */
        void convertMergedMeshToGeomMesh(MergedMesh &mergedMesh, GeomMesh &geomMesh);

    private:
        vector<ListNodePtr> listMergedNodes;
        bool pretty = false;

        ListNodePtr makeNode(ListNodePtr next, int val);

        void deleteNodes();

        void convertToFade2DMesh(const GEOM_FADE2D::Fade_2D &dt, GEOM_FADE2D::Zone2 *traversable,
                                 const std::vector<parsers::Fade2DPolygon> &obstacles,
                                 Fade2DMesh &fade2DMesh);

        double getArea(const MergedMesh &mergedMesh, ListNodePtr vertices);

        bool cw(const Point &a, const Point &b, const Point &c);

        bool canMerge(int x, ListNodePtr v, ListNodePtr p, MergedMesh &mergedMesh);

        void merge(int x, ListNodePtr v, ListNodePtr p, MergedMesh &mergedMesh);

        void checkCorrect(MergedMesh &mergedMesh);

        void mergeDeadEnd(MergedMesh &mergedMesh);

        void smartMerge(MergedMesh &mergedMesh, bool keepDeadEnds = true);
    };
}

#endif //POLYGONS_AND_MAPS_MAPPARSER_H
